// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// Mixin for round corners with vendor prefixes
@mixin rounded($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

// Mixin for a box-shadow with vendor prefixes
@mixin shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
  -moz-box-shadow: $x $y $blur $color;
  box-shadow: $x $y $blur $color;
}

// The spread value must be negative!
@mixin one-edge-shadow($x, $y, $blur, $spread, $color) {
  -webkit-box-shadow: $x $y $blur $spread $color;
  -moz-box-shadow: $x $y $blur $spread $color;
  box-shadow: $x $y $blur $spread $color;
}

// Mixin for a inset box-shadow with vendor prefixes
@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
  -moz-box-shadow: inset $x $y $blur $color;
  box-shadow: inset $x $y $blur $color;
}

// Button style
@mixin buttonstyle {
  border: 1px solid;
  border-color: $shadowgrey;
  background-color: $mediumgrey;
  background-image: -moz-linear-gradient(center top, $lightgrey, $mediumgrey);
  background-image: -webkit-gradient(linear, top, bottom, from($lightgrey), to($mediumgrey));
  background-image: -webkit-linear-gradient(top, $lightgrey 0%, $mediumgrey 100%);
  background-image: linear-gradient(top, $lightgrey, $mediumgrey);
  /* F端r Internet Explorer 5.5 - 7 */
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=$lightgrey, endColorstr=$mediumgrey);
  zoom: 1;
  /* F端r Internet Explorer 8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=$lightgrey, endColorstr=$mediumgrey)";
}

@mixin buttonstyle_hover {
  color: $light;
  border-color: $white;
  border-bottom-color: $shadowgrey;
  background-color: $ht16red;
  background-image: -moz-linear-gradient(center top, $ht16red, $ht16shadow);
  background-image: -webkit-gradient(linear, top, bottom, from($ht16red), to($ht16shadow));
  background-image: -webkit-linear-gradient(top, $ht16red 0%, $ht16shadow 100%);
  background-image: linear-gradient(top, $ht16red, $ht16shadow);
  /* F端r Internet Explorer 5.5 - 7 */
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=$ht16red, endColorstr=$ht16shadow);
  zoom: 1;
  /* F端r Internet Explorer 8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=$ht16red, endColorstr=$ht16shadow)";
}